#!/bin/zsh
###############################################################################
# author:  milomouse <vincent[at]fea.st>                                      #
# detail:  very basic index, port and volume control for 'pulseaudio'         #
# depend:  1:'zsh'  2:'pacmd (provided by pulseaudio)'                        #
##NOTE:########################################################################
# contains Zsh short-hand and nested expansions; not recommended for porting. #
###############################################################################

## start of CODE {{{
# [ do not edit code unless you know exactly what you're doing ]
setopt nofunctionargzero nowarncreateglobal
exec 6>/dev/null

# gather information on main/parent index:
function _info() {
  local x
  x=("$(pacmd list-sinks)") || exit 1
  :;x=${${${(Fw)x}/Welcome* \*/ \*}//   *ex:*}
  [[ -z ${x[58,60]#>>>} ]] && exit 1
  print - $x | while { read s } {
    case "${${(s. .)s}[1]}" {
      '*') m_index=${${(s. .)s}[-1]} ;;
      state:) m_state=${${${${s}#*state:}# }:l} ;;
      volume:) m_vol=${${${${s}#*volume:}# }//  / } ;;
      volume) m_step=${${(s. .)s}[-1]} ;;
      muted:) m_mute=${${${s}#*muted:}# } ;;
      device\.api) m_prog=${${(s. .)s}[-1]//[\<\>\"]} ;;
      active) m_port=${${(s. .)s}[-1]//[\<\>]} && break ;;
      *) [[ ${${(s. .)s}[1]} =~ -output- ]] \
           && m_avail=(${m_avail} ${${(s. .)s}[1]%:})
};};}

# gather information on each [sub]index:
function _subinfo() {
  local x
  x=("$(pacmd list-sink-inputs)") || exit 1
  :;x=${${${(Fw)x}/Welcome*    *ex: $1[[:cntrl:]]/\* $1\\n}//index:*}
  [[ -z ${x[58,60]#>>>} ]] && exit 1
  print - $x | while { read s } {
    case "${${(s. .)s}[1]}" {
      '*') s_index=${${(s. .)s}[-1]} ; use_index="$1 s" ;;
      state:) s_state=${${${${${s}#*state:}# }:l}/corked/paused} ;;
      sink:) s_sink=${${${${(s. .)s}#*sink:}# }[1]}
        [[ $s_sink != ${m_index} ]] && { _subcon=no && break } ;;
      volume:) s_vol=${${${${s}#*volume:}# }//  / } ;;
      muted:) s_mute=${${${s}#*muted:}# } ;;
      application\.process\.id) s_pid=${${(s. .)s}[-1]//[\<\>\"]} ;;
      application\.process\.binary) s_prog=${${(s. .)s}[-1]//[\<\>\"]} && break
};};}

# display all available output ports for [active] main index:
function _portSHOW() {
  unset C
  for i (${m_avail[@]}); {
    C=$((${C:-0}+1))
    if [[ $i == ${m_port} ]] { print "* ${C}:  $i" } \
    else { print "  ${C}:  $i"
};};}

# display^^ and allow interactive selection of output port:
function _portCHOOSE() {
  if [[ -z ${m_avail} ]] { print "no available ports" ; exit 1 } \
  else {
    << EOP
available ports:

$(_portSHOW)

EOP
    printf "choose port: "
    read answer
    until [[ ${answer} == <-> && -n ${${(s. .)m_avail}[${answer}]} ]] \
          || [[ ${answer:l} == q || ${answer:l} == quit ]] {
      printf "choose port: "
      read answer
    }
    if [[ ${answer} == <-> ]] {
      pacmd set-sink-port ${m_index} ${${(s. .)m_avail}[${answer}]} >&6 } \
    else { exit 0
};};}

# manually select output port by NAME or INTEGER (given by _portSHOW):
function _portOUTPUT() {
  print - ${(F)m_avail} | while { read i } {
    if [[ $1 == <-> ]] {
      C=$((${C:-0}+1))
      if [[ $1 == $C && $i == ${${(s. .)m_avail}[${C}]} ]] {
        pacmd set-sink-port ${m_index} $i >&6 };} \
    else { if [[ $1 == $i ]] { pacmd set-sink-port ${m_index} $i >&6
};};};}

# display information as a whole or individually as per ARGUMENT:
function _volumeSHOW() {
  if [[ -z $1 ]] {
    if [[ ${use_index[-1]} == s ]] {
      [[ ${_subcon} == no ]] && exit 1
      << EOP
(index: ${use_index%s}[sub]
  (program: ${s_prog:-n/a})
  (process: ${s_pid:-n/a})
  (parent:  ${m_index})
  (volume:  ${s_vol:-n/a})
  (muted:   ${s_mute:-n/a})
  (state:   ${s_state:-n/a})
  (port:    ${m_port:-n/a}))
EOP
      exit 0 } \
    else {
      << EOP
(index: ${m_index:-n/a}
  (control: ${m_prog:-n/a})
  (volume:  ${m_vol:-n/a})
  (muted:   ${m_mute:-n/a})
  (state:   ${m_state:-n/a})
EOP
      for i (${(s. .)${${${${(M)${(F)"$(pacmd list-sink-inputs ;\
:)"}%%index:*}//driver:*index:}//driver:*>>>}//index: }//[[:space:]]/ }); {
        _subinfo $i
        if [[ ${+_subcon} == 0 ]] {
          C=$((${C:-0}+1))
          [[ ${+C} == 1 && ${C} == 1 ]] && print
          << EOP
      (index: ${s_index:-n/a} [sub]
        (program: ${s_prog:-n/a})
        (process: ${s_pid:-n/a})
        (volume:  ${s_vol:-n/a})
        (muted:   ${s_mute:-n/a})
        (state:   ${s_state:-n/a})

EOP
        }
      }
      print "  (port:    ${m_port:-n/a}))" ; exit 0
  };} \
  else {
    case $1 {
      port) print - "${m_port:-n/a}" ;;
      parent) print - "${m_index}" ;;
      prog|program|control) [[ ${use_index[-1]} == s ]] \
        && print - "${s_prog:-n/a}" || print - "${m_prog:-n/a}" ;;
      pid|process) [[ ${use_index[-1]} == s ]] && print - "${s_pid:-n/a}" ;;
      index) [[ ${use_index[-1]} == s ]] && print - "${use_index%s}" \
        || print - "${m_index:-n/a}" ;;
      vol|volume) [[ ${use_index[-1]} == s ]] && print - "${s_vol%s}" \
        || print - "${m_vol:-n/a}" ;;
      mute|muted) [[ ${use_index[-1]} == s ]] && print - "${s_mute:-n/a}" \
        || print - "${m_mute:-n/a}" ;;
      state) [[ ${use_index[-1]} == s ]] && print - "${s_state:-n/a}" \
        || print - "${m_state:-n/a}" ;;
      *) exit 1
};};}

# set volume percentage (0-153) for main index or given subindex:
function _volumeSET() {
  local setindex
  [[ ${use_index[-1]} == s ]] && setindex="set-sink-input-volume" \
    || setindex="set-sink-volume"
  if [[ $1 -le 153 && $1 -ge 0 ]] {
    pacmd ${setindex} ${use_index//[a-zA-Z]} $(($1 * \
    ${m_step:-65537} / 100)) >&6 } \
  else { print - "$1: Failed to parse volume"
};}

# increase volume percentage^^ by 1[%] or ARGUMENT (max of 153):
function _volumeINC() {
  local setindex vol
  if [[ ${use_index[-1]} == s ]] {
    setindex="set-sink-input-volume"
    vol=${${(s. .)s_vol}[-1]%\%} } \
  else {
    setindex="set-sink-volume"
    vol=${${(s. .)m_vol}[-1]%\%} }
  if [[ $1 == <-> && $(($1 + ${vol})) -le "153" ]] {
    pacmd ${setindex} ${use_index//[a-zA-Z]} $(($((${vol} + $1)) * \
    ${m_step:-65537} / 100)) >&6 } \
  elif [[ -z $1 && $((1 + ${vol})) -le "153" ]] {
    pacmd ${setindex} ${use_index//[a-zA-Z]} $(($((${vol} + 1)) * \
    ${m_step:-65537} / 100)) >&6
};}

# decrease volume percentage^^ by 1[%] or ARGUMENT (minimum of 0):
function _volumeDEC() {
  local setindex vol
  if [[ ${use_index[-1]} == s ]] {
    setindex="set-sink-input-volume"
    vol=${${(s. .)s_vol}[-1]%\%} } \
  else {
    setindex="set-sink-volume"
    vol=${${(s. .)m_vol}[-1]%\%} }
  if [[ $1 == <-> && $((${vol} - $1)) -ge "0" ]] {
    pacmd ${setindex} ${use_index//[a-zA-Z]} $(($((${vol} - $1)) * \
    ${m_step:-65537} / 100)) >&6 } \
  elif [[ -z $1 && $((${vol} - 1)) -ge "0" ]] {
    pacmd ${setindex} ${use_index//[a-zA-Z]} $(($((${vol} - 1)) * \
    ${m_step:-65537} / 100)) >&6
};}

# toggle or manually set mute parameter for main index or given subindex:
function _volumeMUTE() {
  local setindex setstats
  if [[ ${use_index[-1]} == s ]] {
    setindex="set-sink-input-mute"
    setstats=${s_mute} } \
  else {
    setindex="set-sink-mute"
    setstats=${m_mute} }
  if [[ -z $1 ]] {
    if [[ ${setstats} == no ]] {
      pacmd ${setindex} ${use_index//[a-zA-Z]} yes >&6 } \
    else {
      pacmd ${setindex} ${use_index//[a-zA-Z]} no >&6 } ; } \
  elif [[ $1:l == on || $1:l == yes ]] {
    pacmd ${setindex} ${use_index//[a-zA-Z]} yes >&6 } \
  elif [[ $1:l == off || $1:l == no ]] {
    pacmd ${setindex} ${use_index//[a-zA-Z]} no >&6
};}

# display proper usage information:
function _help() {
  << EOFN
Very basic PulseAudio index, port and volume controller.
usage: ${0:t} [subindex] <option> [arg]

First argument must be a sink-input index (subindex) or one of the
following options. If no subindex supplied then use active parent.

options:
  -a,  --announce     Display index information
                        Default:  show everything (formatted)
                        Optional: [index]|[state]|[port]|[parent]
                        Optional: [volume]|[mute]|[pid]|[program]
  -i,  --increase     Increase volume by ARG, else 1
                        Default:  increase by 1
                        Optional: increase by ((integer))
  -d,  --decrease     Decrease volume by ARG, else 1
                        Default:  decrease by 1
                        Optional: decrease by ((integer))
  -s,  --set          Set volume to ARG
                        Default:  set all channels to ARG
  -m,  --mute         Toggle volume mute on or off
                        Default:  toggle between on/off
                        Optional: [[on|yes]|[off|no]]

exclusive options:
  -p,  --ports        Display available ports for active parent
  -o,  --output       Change output port to ARG, else do nothing
                        Optional: NAME, as shown by --ports
                        Optional: ((integer)), as shown by --ports
  -c,  --choose       Interactively choose output port

examples:
  ${0:t} 3 --increase 5    (subindex 3, raise volume by 5)
  ${0:t} 3 --mute          (subindex 3, mute)
  ${0:t} --decrease 5      (active parent, lower volume by 5)
  ${0:t} 5 --announce pid  (subindex 5, display process id)
  ${0:t} 5 --set 60        (subindex 5, set volume to 60%)
  ${0:t} --set 100         (active parent, set volume to 100%)
  ${0:t} --output 2        (active + sub(s), output port to #2)
EOFN
}
## end of CODE }}}

## start of RUNTIME {{{
[[ -z $1 || $1 == '-h' || $1 =~ '-help' ]] \
  && { { _help ; exit 0 } always { exec 6<&- } }

_info

case $1 {
  '-p'|'--ports') { _portSHOW ; exit } always { exec 6<&- } ;;
  '-o'|'--output') { _portOUTPUT ${@:/$1} ; exit } always { exec 6<&- } ;;
  '-c'|'--choose') { _portCHOOSE ; exit } always { exec 6<&- }
}

if [[ $1 == <-> ]] { _subinfo $1 ; IN=${2} ; ARG=${${@:/$1}:/$2} } \
else { use_index="${m_index} m" ; IN=${1} ; ARG=${@:/$1} }

case $IN {
  '-a'|'--announce') { _volumeSHOW ${ARG} } always { exec 6<&- } ;;
  '-s'|'--set') { _volumeSET ${ARG} } always { exec 6<&- } ;;
  '-m'|'--mute') { _volumeMUTE ${ARG} } always { exec 6<&- } ;;
  '-i'|'--increase') { _volumeINC ${ARG} } always { exec 6<&- } ;;
  '-d'|'--decrease') { _volumeDEC ${ARG} } always { exec 6<&- } ;;
  *) { _help ; exit 1 } always { exec 6<&- }
}
## end of RUNTIME }}}
