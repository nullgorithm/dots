#
# bashmount.conf
#

# Place in /etc/bashmount.conf for system wide configuration.
# Place in ~/.config/bashmount/config for per-user configuration.
# XDG_CONFIG_HOME is respected if it has been set.

# Set which sections to show in the output. These can be "0" or "1".
show_removable="1"
show_optical="1"
show_commands="0"

# Set whether to colourize the output. This can be "0" or "1".
colourize="1"

# Set optical device location. This string is matched using grep like so:
# udisks --enumerate-device-files | grep -ow ${optical_devices} | sort
# See the grep man page for more information.
optical_devices="-E /dev/sr[0-9]+"

# Set removable devices location. The default is to ignore /dev/sda*, which is
# usually the primary system drive. Devices such as SD card readers show up as
# /dev/mmcblk* and are also matched. This string is matched using grep like so:
# udisks --enumerate-device-files | grep -ow ${removable_devices} | sort
# See the grep man page for more information.
removable_devices="-E /dev/sd[b-z][0-9]+|/dev/mmcblk[0-9]+p*[0-9]*"

# Set whether to show internal devices. This can be "0" or "1". If you have
# system drives that are always found at the same location (e.g. /dev/sda),
# it is better and faster to hide them using the "removable_devices" option.
show_internal="0"

# Set devices to blacklist. Any device whose "udisks --show-info" output
# contains a string listed here will be hidden. The strings are matched
# using "grep -E".
blacklist=( )

###
### This example will match any device with "Photosmart" in any field.
### blacklist+=( 'Photosmart' )
###
### This example matches only the model field, to reduce false positives.
### blacklist+=( 'model: * Photosmart C4400' )
###
### This example matches several different devices. Note that the array can be
### split over multiple lines for convenience.
### blacklist+=( 'by-id: * /dev/disk/by-id/ata-ST9250410AS_5VG8EAYT-part4' )
### blacklist+=( 'label: * secret' )
### blacklist+=( 'vendor: * Huawei' )
###

# Set default mount options for Udisks.
mount_options="--options nosuid,noexec,noatime"

# Set whether to show the device filename in the menu. These can be "0" or "1".
# Example: If this is set to "1" then the menu entry will show "sdb1: cruzer",
# while if this is set to "0" then the menu entry will only show "cruzer". This
# might be confusing, as they will still be sorted by device filename not label.
show_removable_device_filename="1"
show_optical_device_filename="1"

# Set filemanager command to use when performing the "open" command. The mount
# point is passed as the first argument. The default is to open the directory
# within your terminal.

# Uncomment this example to launch a graphical file manager.
#filemanager() {
#   /usr/bin/nautilus "${1}" & >/dev/null 2>&1
#}

# Uncomment this example to launch midnight commander in a new window.
filemanager() {
  urxvt -e ranger "${1}" & >/dev/null 2>&1
}

# Set whether to sort devices more thoroughly. This can be "0" or "1".
# This option is basically a big hack to get around a shortcoming of the sort
# command, which causes /dev/sdc11 to be shown in the menu before /dev/sdc2.
# It will deal with /dev/sd* and /dev/dm-* devices, but not /dev/mmcblk*p*,
# which would require an even bigger hack.
fancy_sort="0"

# Set custom commands. Set "customX_show" to "0" to disable or "1" to enable.
# If enabled, the custom commands will be shown in the device sub-menu. The
# description and command functions can be set to anything you desire. The
# device name (e.g. /dev/sdb1) is passed as the first and only argument.
# A maximum of 6 custom actions are configurable.
custom1_show="0"
custom1_desc="read-only"
custom1_command() {
    udisksctl mount --options nosuid,noexec,noatime,ro --block-device ${1}
}

custom2_show="0"
custom2_desc="luksOpen"
custom2_command() {
    udisksctl unlock --block-device ${1}
}

custom3_show="0"
custom3_desc="luksClose"
custom3_command() {
    udisksctl lock --block-device ${1}
}

#custom4_show="0"
#custom4_desc=""
#custom4_command() {
#
#}

#custom5_show="0"
#custom5_desc=""
#custom5_command() {
#
#}

#custom6_show="0"
#custom6_desc=""
#custom6_command() {
#
#}

# Set custom commands to be run automatically after mounting or unmounting.
# This is useful for spinning down a hard drive after unmounting it. The
# device name (e.g. /dev/sdb1) is passed as the first and only argument.
# Uncomment the examples below, or modify them to pass any arbitrary commands.
# post_mount is run immediately after a successful mount operation, and
# post_unmount is run immediately after a successful unmount operation.

# Set "run_post_mount" to "0" to disable or "1" to enable.
run_post_mount="0"

# This example uses udisks to set the spindown timeout after mounting.
#post_mount() {
#   printf '\n'; msg "Setting spindown timeout ..."
#   udisks --set-spindown ${1} --spindown-timeout 240
#}

# Set "run_post_unmount" to "0" to disable or "1" to enable.
run_post_unmount="0"

# This example uses hd-idle to spin down the device after unmounting, but only
# if it is the only remaining mounted partition on the device.
#post_unmount() {
#   if ( ! mount | grep -q "^${1%%[0-9]*}" ); then
#       printf '\n'; msg "Spinning down device ..."
#       dev=${1#/dev/}
#       sudo hd-idle -t ${dev%%[0-9]*}
#   fi
#}
