;; vim: ft=lisp
;;    M Y  S T U M P W M R C    ;;

;;;; Standard settings

(in-package :stumpwm)
(set-contrib-dir "/home/luizf/Builds/stumpwm/contrib")
(load-module "window-tags")

;; Startup message
(setf *startup-message*
       "Everything seems to be fine.")

;; Directories
(setf *home-dir*      (make-pathname :directory (getenv "XDG_CONFIG_HOME"))
      *stump-dir*     (merge-pathnames (make-pathname :directory '(:relative "stumpwm")) *home-dir*)
      *data-dir*      (merge-pathnames (make-pathname :directory '(:relative "storage")) *stump-dir*)
      *load-dir*      (merge-pathnames (make-pathname :directory '(:relative "lisp")) *stump-dir*)
      *undo-data-dir* (make-pathname :directory "/dev/shm/.1009")
      *debug-file*    (merge-pathnames (make-pathname :name "debug") *stump-dir*)
      *scratchpad-group-name* ".scratch")

;;;; Appearance

;; Default font
(set-font "-xos4-terminus-medium-r-normal--12-120-72-72-c-60-iso8859-1")

;; Borders
(setf *maxsize-border-width*   0
      *transient-border-width* 0
      *normal-border-width*    5
      *window-border-style*    :thin
      *float-window-border*    1
      *float-window-title-height* 1)

(set-focus-color     "grey16")
(set-unfocus-color   "grey6")
(set-win-bg-color    "gray6")

;; Messages
(set-fg-color        "grey64")
(set-bg-color        "grey14")
(set-msg-border-width 1)

(setf *message-window-padding* 10
      *message-window-gravity* :bottom-right
      *input-window-gravity* :bottom-right)

;;;; Keyboard/Mouse

;; Focus policy (:click or :sloppy)
(setq *mouse-focus-policy* :click)

;; The prefix key
(set-prefix-key (kbd "s-a"))

;; Group change with "s-*"
(dotimes (i 9)
  (define-key *top-map* (kbd (format nil "s-~A" (1+ i)))
              (format nil "go-group ~A" (1+ i)))
  (define-key *top-map* (kbd (format nil "s-M-~A" (1+ i)))
              (format nil "gmove ~A" (1+ i))))

;; Vi-like frame changing
(loop for (vi-key name) in '(("k" "up")
                             ("j" "down")
                             ("h" "left")
                             ("l" "right"))
      do (let ((key-combo (format nil "s-~A" vi-key))
               (shifted-key-combo (format nil "s-~A" (string-upcase vi-key))))
           (define-key *top-map* (kbd key-combo)
                       (format nil "move-focus ~A" name))
           (define-key *top-map* (kbd shifted-key-combo)
                       (format nil "move-window ~A" name))))

;; Vi-like binds for menus
(setf *menu-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "k")   'menu-up)
        (define-key m (kbd "j")   'menu-down)
        (define-key m (kbd "SPC") 'menu-finish)
        (define-key m (kbd "RET") 'menu-finish)
        (define-key m (kbd "ESC") 'menu-abort)
        m))

;; Group management binds
(defvar *group-map* nil
  "Keymap for doing stuffs to groups")
(setf *group-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "N")   "gnew")
        (define-key m (kbd "F")   "gnew-float")
        (define-key m (kbd "n")   "gnewbg")
        (define-key m (kbd "f")   "gnewbg-float")
        (define-key m (kbd "d")   "gkill")
        (define-key m (kbd "m")   "gmove")
        (define-key m (kbd "r")   "grename")
        (define-key m (kbd "ESC") "abort")
        m))
(define-key *top-map* (kbd "s-g") '*group-map*)

(defvar *query-map* nil
  "Keymap for searching the webs")
(setf *query-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "ESC") "abort")
        (define-key m (kbd "i") "imdb")
        (define-key m (kbd "g") "google")
        (define-key m (kbd "w") "wikipedia")
        (define-key m (kbd "y") "youtube")
        (define-key m (kbd "b") "bbs")
        (define-key m (kbd "t") "bbsa")
        (define-key m (kbd "a") "awiki")
        (define-key m (kbd "p") "pac")
          (define-key m (kbd "u") "aur")
        m))
(define-key *top-map* (kbd "s-w") '*query-map*)

;; Top keys
(define-key *top-map* (kbd "s-;") "colon")
(define-key *top-map* (kbd "s-:") "eval")
(define-key *top-map* (kbd "s-e") "exec")
(define-key *top-map* (kbd "s-q") "delete")
(define-key *top-map* (kbd "s-BackSpace") "kill-window")
(define-key *top-map* (kbd "s-R") "loadrc")
(define-key *top-map* (kbd "s-Q") "quit")
(define-key *top-map* (kbd "s-Tab") "fnext")
(define-key *top-map* (kbd "s-G") "grouplist")
(define-key *top-map* (kbd "s-r") "iresize")
(define-key *top-map* (kbd "s-f") "fselect")
(define-key *top-map* (kbd "s-u") "undo")
(define-key *top-map* (kbd "s-y") "redo")
(define-key *top-map* (kbd "s-p") "exec interrobang")
(define-key *top-map* (kbd "s-Left") "gprev")
(define-key *top-map* (kbd "s-Right") "gnext")

;; Urxvt
(define-key *top-map* (kbd "s-RET") "exec urxvtc")
(define-key *root-map* (kbd "c") "exec urxvtc -e cat /home/luizf/doc/welcome")

;; Root keys
(define-key *root-map* (kbd "ESC") "abort")
(define-key *root-map* (kbd "Up") "lastmsg")
(define-key *root-map* (kbd "b") "exec firefox")
(define-key *root-map* (kbd "e") "exec emacs")
(define-key *root-map* (kbd "g") "exec ~/bin/google_dmenu")
(define-key *root-map* (kbd "n") "exec urxvtc -e ncmpcpp")
(define-key *root-map* (kbd "t") "exec urxvtc -e tmux")
(define-key *root-map* (kbd "T") "exec urxvtc -e tmux attach")
(define-key *root-map* (kbd "v") "exec urxvtc -e vim")

;; Media keys
(define-key *top-map* (kbd "XF86AudioPlay") "exec mpc toggle")
(define-key *top-map* (kbd "XF86AudioNext") "exec mpc next")
(define-key *top-map* (kbd "XF86AudioPrev") "exec mpc prev")
(define-key *top-map* (kbd "XF86AudioStop") "exec mpc stop")
(define-key *top-map* (kbd "XF86AudioMedia") "exec urxvtc -e ncmpcpp")

(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer -q sset PCM 1%+ unmute")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer -q sset PCM 1%- unmute")
(define-key *top-map* (kbd "XF86AudioMute") "exec spawn amixer -q sset Master toggle")

;;;; Custom settings

;; Colors definition
(setf *colors* (list "grey9"          ; 0 black
                     "deeppink"       ; 1 red
                     "chartreuse3"    ; 2 green
                     "gold1"          ; 3 yellow
                     "steelblue3"     ; 4 blue
                     "mediumpurple4"  ; 5 magenta
                     "cyan3"          ; 6 cyan
                     "honeydew4"      ; 7 white
                     "thistle4"       ; 8 user
                     "lightskyblue4")); 9 user
(update-color-map (current-screen))

;; A hook needed for the dzen2 config
;; It'll create a log file while the focused workspace change
(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))

(replace-hook *focus-group-hook* 'callback-groupchange)

(defun callback-groupchange (new-group old-group)
  (with-open-file (file (format nil "/home/luizf/.config/stumpwm/stumpwm.log")
                        :direction         :output
                        :if-exists         :append
                        :if-does-not-exist :create)
    (format file "Workspace change: ~A to ~A~%" (group-name old-group) (group-name new-group))))

;; Useful, will show the keys being pressed
(defun print-key-seq (seq) (format nil "^B^9*~{~a~^ ~}^n^1*" (mapcar 'print-key seq)))
(defun display-bindings-for-keymaps (key-seq &rest keymaps)
"Display key-bindings for a given keymap, using a simple and clean format."
  (let* ((screen (current-screen))
         (data (mapcan (lambda (map)
                         (mapcar (lambda (b) (format nil "^B^3*~5a^n ~a" (print-key (binding-key b)) (binding-command b))) (kmap-bindings map)))
                       keymaps))
         (cols (ceiling (1+ (length data))
                        (truncate (- (head-height (current-head)) (* 2 (screen-msg-border-width screen)))
                                  (font-height (screen-font screen))))))
    (message-no-timeout "Prefix: ~a~%~{~a~^~%~}"
                        (print-key-seq key-seq)
                        (columnize data cols))))

;; Zsh as default shell
(defcommand run-shell-command (cmd &optional collect-output-p)
            ((:shell "execute: "))
            "Run the specified shell command. If @var{collect-output-p} is @code{T}
            then run the command synchronously and collect the output."
            (if collect-output-p
              (run-prog-collect-output *shell-program* "-c" cmd)
              (run-prog *shell-program* :args (list "-c" cmd) :wait nil)))

(setf *shell-program* (getenv "SHELL"))
(defcommand-alias exec run-shell-command)

;;

(defun focus-frame (group f)
"Focus frame but do not show-frame-indicator in certain cases."
  (let ((w (frame-window f))
        (last (tile-group-current-frame group))
        (show-indicator nil))
    (setf (tile-group-current-frame group) f)
    (unless (eq f last)
      (setf (tile-group-last-frame group) last)
      (run-hook-with-args *focus-frame-hook* f last)
      (setf show-indicator t))
    (if w (focus-window w) (no-focus group (frame-window last)))
    (if show-indicator (show-frame-outline group))))

;; To-and-Fro Group switching (like i3)
(defcommand go-group (n) ((:number "Go to group: "))
            "Go to selected group, or back to last used one"
            (if (= (slot-value (current-group) 'number) n)
              (gother)
              (run-commands (format nil "gselect ~A" n))))

;; create given groups while keeping focus on current.
(defmacro make-groups-bg (&rest names)
  (let ((ns (mapcar #'(lambda (n) (concatenate 'string "gnewbg " n)) names)))
    `(run-commands ,@ns)))

;; reassign original commands to *-forget
(defcommand quit-forget () () "Quit StumpWM without remembering current state."
  (with-open-file (stream *debug-file* :direction :io :if-exists :supersede))
  (cond ((find-group (current-screen) *scratchpad-group-name*)
         (if (eq (current-group) (find-group (current-screen) *scratchpad-group-name*))
             (gkill)
           (progn
             (gnext) (kill-group
                      (find-group (current-screen) *scratchpad-group-name*)
                      (current-group))))))
  (throw :top-level :quit))

(defcommand restart-soft-forget () ()
  "Soft Restart StumpWM without remembering current state.
The lisp process isn't restarted. Instead, control jumps
to the very beginning of the stumpwm program. This
differs from RESTART, which restarts the unix process.

Since the process isn't restarted, existing customizations remain
after the restart."
  (throw :top-level :restart))

(defcommand loadrc-forget () () "Reload the @file{~/.stumpwmrc} file without remember current state."
  (handler-case
   (progn
     (with-restarts-menu (load-rc-file nil)))
   (error (c)
          (message "^B^1*Error loading rc file:^n ~A" c))
   (:no-error (&rest args)
              (declare (ignore args))
              (message "rc file loaded successfully."))))

(defcommand loadrc () () "Reload the @file{~/.stumpwmrc} file while remembering current state."
  (remember-all) (loadrc-forget))

(defcommand restart-soft () ()
  "Soft Restart StumpWM while remembering current state.
The lisp process isn't restarted. Instead, control jumps
to the very beginning of the stumpwm program. This
differs from RESTART, which restarts the unix process.

Since the process isn't restarted, existing customizations remain
after the restart."
  (remember-all) (restart-soft-forget))

(defcommand-alias restart restart-soft)

(defcommand quit () ()
  "Quit StumpWM while remembering current state."
  (cond ((find-group (current-screen) *scratchpad-group-name*)
         (if (eq (current-group) (find-group (current-screen) *scratchpad-group-name*))
             (gkill)
           (progn
             (gnext) (kill-group
                      (find-group (current-screen) *scratchpad-group-name*)
                      (current-group))))))
  (remember-all) (quit-forget))

;; Dumping
(defun remember-all () ()
"Similiar to remember-group except all information is dumped, useful
for next startup or recalling all undo actions."
  (dump-to-datadir "rules") (dump-to-datadir "desktop"))

;; dump [current]-group (for current-screen), [current]-screen, desktop or window-placement-rules
;; to a dynamically named file in user defined *data-dir*.
(defcommand dump-to-datadir (expr) (:rest)
  "Dump group (from current-screen), screen (current-screen), desktop or rules to file in data-dir.
Just specify what you want to dump and this will dynamically create and name file accordingly."
  (cond ((string-equal expr 'group)
         (let* ((o (make-pathname :name (format nil "screen_~{~A~}_group_~{~A~}"
                                                (list (char (getenv "DISPLAY") 1)) (list (group-name (current-group))))
                                  :type "lisp" :defaults *data-dir*)))
           (dump-group-to-file o) (message "~A dumped" expr)))
        ((string-equal expr 'screen)
         (let* ((o (make-pathname :name (format nil "screen_~{~A~}" (list (char (getenv "DISPLAY") 1)))
                                  :type "lisp" :defaults *data-dir*)))
           (dump-screen-to-file o) (message "~A dumped" expr)))
        ((string-equal expr 'rules)
         (let* ((o (make-pathname :name "tile-rules" :type "lisp" :defaults *data-dir*)))
           (dump-window-placement-rules o) (message "~A dumped" expr)))
        ((string-equal expr 'desktop)
         (let* ((o (make-pathname :name "desktop" :type "lisp" :defaults *data-dir*)))
           (dump-desktop-to-file o) (message "~A dumped" expr)))
        (t (message "dont know how to dump ~a" expr))))

;; dump to file, which is silent, but with more informative prompts.
(defcommand dump-group-to-file (file) ((:rest "group to file: "))
  "Dumps the frames of the current group of the current screen to the named file."
  (dump-to-file (dump-group (current-group)) file))
(defcommand dump-screen-to-file (file) ((:rest "screen to file: "))
  "Dumps the frames of all groups of the current screen to the named file."
  (dump-to-file (dump-screen (current-screen)) file))
(defcommand dump-desktop-to-file (file) ((:rest "desktop to file: "))
  "Dumps the frames of all groups of all screens to the named file."
  (dump-to-file (dump-desktop) file))

;; Groups
(defun remember-group (&optional (group (current-group))) ()
"Remember current group information before calling another command or
function. Combined with 'undo' command this allows for toggling between
the two undo states."
  (if (ensure-directories-exist *undo-data-dir*)
    (when group
      (dump-group-to-file
        (make-pathname :name (format nil "screen_~{~A~}_group_~{~A~}"
        (list (char (getenv "DISPLAY") 1)) (list (group-name (current-group))))
        :type "lisp" :defaults *undo-data-dir*)))))

(defun fmt-group-status (group)
  (let ((screen (group-screen group)))
    (cond ((eq group (screen-current-group screen))
           #\*)
          ((and (typep (second (screen-groups screen)) 'group)
                (eq group (second (screen-groups screen))))
           #\+)
          (t #\-))))

;; restore data from previous exit (state StumpWM was last using)
(clear-window-placement-rules)
(setf (group-name
        (first
          (screen-groups (current-screen)))) "term")
(make-groups-bg "www" "media")
(if (probe-file (data-dir-file "desktop.lisp"))
  (restore-from-file (data-dir-file "desktop.lisp")))
(restore-window-placement-rules (data-dir-file "tile-rules.lisp"))
(cond ((string-equal (group-name (current-group)) *scratchpad-group-name*) (gother)))

;; Websearch
(defmacro make-web-jump (name url-prefix)
  `(defcommand ,name (search)
               ((:rest ,(concatenate 'string (symbol-name name) ": ")))
               "Search web"
               (run-shell-command (format nil "luakit '~A'"
                                          (concat ,url-prefix (substitute #\+ #\Space search))))))

(make-web-jump imdb      "http://www.imdb.com/find?q=")
(make-web-jump google    "http://www.google.com.br/search?q=")
(make-web-jump wikipedia "http://pt.wikipedia.org/wiki/Special:Search?fulltext=Search&search=")
(make-web-jump youtube   "http://youtube.com/results?search_query=")
(make-web-jump bbs       "http://bbs.archlinux.org/search.php?action=search&show_as=topics&sort_dir=DESC&keywords=")
(make-web-jump bbsa      "http://bbs.archlinux.org/search.php?action=search&show_as=topics&sort_dir=DESC&author=")
(make-web-jump awiki     "https://wiki.archlinux.org/index.php?title=Special%%3ASearch&search=")
(make-web-jump pac       "http://www.archlinux.org/packages/?q=")
(make-web-jump aur       "http://aur.archlinux.org/packages.php?K=")

;;;; Rules
;(define-frame-preference "www"
;                         (0 t t :class "Luakit"))

;(define-frame-preference "gfx"
;                         (0 t t :class "Gimp"))

;(define-frame-preference "im"
;                         (0 t t :class "Skype"))

;(define-frame-preference "media"
;                         (0 t t :class "mplayer2"))

;;;; Startup

;; Space for dzen
(resize-head 0 0 0 1366 753)

;; and the own dzen
(run-shell-command "killall /home/luizf/bin/dzen_stump")
(run-shell-command "killall /home/luizf/bin/dzen_groups.sh")
(run-shell-command "killall dzen2")
(run-shell-command "killall dzen_stump")
(run-shell-command "killall tail")
(run-shell-command "killall awk")
(run-shell-command "/home/luizf/bin/dzen_stump")

;; EOF
